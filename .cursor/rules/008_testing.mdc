---
description: Testing Guidelines
globs: 
alwaysApply: false
---
# Testing Guidelines

## Core Principles
- Use Bun's built-in test runner
- Maintain test isolation
- Follow consistent naming patterns
- Clean up after tests
- Document test setup and data

## Directory Structure
```
tests/
├── unit/          # Unit tests
├── integration/   # Integration tests
└── e2e/          # End-to-end tests
    ├── flows/     # Feature-specific flows
    ├── helpers/   # Test utilities
    ├── setup/     # Environment setup
    └── fixtures/  # Test data
```

## Test Commands
```bash
# Basic commands
bun test              # Run all tests
bun test:watch        # Watch mode
bun test:file <path>  # Single file

# Test types
bun test:unit         # Unit tests
bun test:integration  # Integration tests
bun test:e2e         # E2E tests
```

## File Naming
- Use `.test.ts` extension
- Include test type in name
- Examples:
  - `auth.test.ts`
  - `badge.integration.test.ts`
  - `issuer-flow.test.ts`

## Environment Setup
- `NODE_ENV=test` for integration/E2E
- `E2E_TEST=true` for E2E only
- Docker for test database
- Automatic migrations
- Data cleanup between runs

## Common Patterns
```typescript
// Server setup
const { server, request } = createTestServer(app);

// Authentication
const user = await registerAndLoginUser(request);
await authenticatedRequest(request, 'get', '/path', token);

// Database
await resetDatabase();
await seedTestData();
```

## Best Practices
1. One assertion per test when possible
2. Use descriptive test names
3. Follow AAA pattern (Arrange, Act, Assert)
4. Mock external dependencies
5. Clean up resources
6. Document complex setups
7. Use shared utilities
8. Keep tests focused

## Test Structure
- `tests/unit/`: Unit tests for individual components
- `tests/integration/`: Integration tests for API endpoints and services
- `tests/e2e/`: End-to-end tests for complete user flows
  - `flows/`: Feature-specific test flows
  - `helpers/`: Test utilities and setup
  - `fixtures/`: Test data
  - `setup/`: Test environment configuration

## Helper Functions
```typescript
// Create test server
const { server, request } = createTestServer(app);

// Auth helpers
const user = await registerAndLoginUser(request);
const response = await authenticatedRequest(request, 'get', '/endpoint', token);

// Database helpers
await resetDatabase();
```

## Example Test
```typescript
import { describe, it, expect } from 'vitest';
import { createTestServer, registerAndLoginUser } from '../helpers/test-utils';

describe('Badge API', () => {
  const { server, request } = createTestServer(app);

  it('should create a badge', async () => {
    const user = await registerAndLoginUser(request);
    const response = await authenticatedRequest(
      request,
      'post',
      '/badges',
      user.token,
      { name: 'Test Badge' }
    );
    expect(response.status).toBe(201);
  });
});
``` 
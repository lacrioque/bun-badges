version: '3.8'

services:
  # Test database service
  db_test:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bun_badges_test
      # Optimize Postgres for testing
      POSTGRES_INITDB_ARGS: "--nosync"
      PGDATA: /var/lib/postgresql/data/pgdata
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    ports:
      - "5434:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
      # Add schema files for initialization
      - ./scripts/test-db:/docker-entrypoint-initdb.d/schema
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Test runner service
  test_runner:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=test
      - E2E_TEST=true
      - DATABASE_URL=postgres://postgres:postgres@db_test:5432/bun_badges_test
      - JWT_SECRET=test-jwt-secret-for-e2e-tests
      - AUTH_TOKEN_EXPIRY=1d
      - LOG_LEVEL=error
      - TEST_MODE=true
      - PORT=3000
      - HOST=0.0.0.0
    depends_on:
      db_test:
        condition: service_healthy
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - ./test-results:/app/test-results
    command: ["sh", "-c", "echo 'Waiting for database...' && sleep 2 && bun run db:migrate && bun test:e2e:vitest"]
    networks:
      - test_network

  # Redis for caching (if needed by your app)
  redis_test:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # Optional service for viewing test reports
  test_reporter:
    image: nginx:alpine
    volumes:
      - ./test-results:/usr/share/nginx/html
    ports:
      - "8080:80"
    depends_on:
      - test_runner
    networks:
      - test_network

volumes:
  postgres_test_data:
    driver: local
  node_modules:
    driver: local
  test-results:
    driver: local

networks:
  test_network:
    driver: bridge

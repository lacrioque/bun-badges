[project]
name = "bun-badges"
version = "0.0.1"
description = "Open Badges server implementation using Bun and Hono"

[quality]
min_test_coverage = 80
max_complexity = 10
max_lines_per_function = 50
max_parameters = 4
enforce_types = true

[style]
indent_size = 2
max_line_length = 100
quotes = "single"
semicolons = true

[patterns]
src_dir = "src"
test_dir = ["src/__tests__", "tests/unit", "tests/integration"]
build_dir = "dist"
docs_dir = "docs"

[naming]
components = "PascalCase"
functions = "camelCase"
variables = "camelCase"
constants = "UPPER_SNAKE_CASE"
types = "PascalCase"
interfaces = "PascalCase"

[git]
main_branch = "main"
commit_convention = "conventional"
require_issue_reference = true
protected_branches = ["main", "develop"]

[security]
require_auth = true
env_file_required = true
sensitive_patterns = [
  "password",
  "secret",
  "key",
  "token"
]

[dependencies]
package_manager = "bun"
lockfile_required = true
allow_only_exact_versions = false
security_audit_level = "high"

[commands]
bun = { execute = "bun" }
start = { execute = "bun run src/index.ts" }
dev = { execute = "bun --watch run src/index.ts" }
dev_https = { execute = "USE_HTTPS=true bun --watch run src/index.ts" }
dev_docker = { execute = "docker-compose -f docker-compose.dev.yml up" }
dev_docker_build = { execute = "docker-compose -f docker-compose.dev.yml up --build" }
dev_docker_down = { execute = "docker-compose -f docker-compose.dev.yml down" }
dev_light = { execute = "docker-compose -f docker-compose.light.yml up" }
dev_light_build = { execute = "docker-compose -f docker-compose.light.yml up --build" }
dev_light_down = { execute = "docker-compose -f docker-compose.light.yml down" }
gen_certs = { execute = "bash ./scripts/generate-certs.sh" }
build = { execute = "bun build src/index.ts --outdir dist --target bun" }
tsc = { execute = "tsc --noEmit" }
tsc_src = { execute = "tsc --project tsconfig.src.json --noEmit" }
tsc_test = { execute = "tsc --project tsconfig.test.json --noEmit" }
format = { execute = "prettier --write \"src/**/*.{ts,tsx}\"" }
lint = { execute = "eslint \"src/**/*.{ts,tsx}\" --fix" }
lint_fix = { execute = "eslint \"src/**/*.{ts,tsx}\" --fix" }
db_generate = { execute = "drizzle-kit generate:pg" }
db_migrate = { execute = "bun run tests/scripts/run-migration.js" }
db_migrate_status = { execute = "bun run tests/scripts/run-migration.js" }
db_push = { execute = "drizzle-kit push:pg" }
db_studio = { execute = "drizzle-kit studio" }
test = { execute = "bun test --preload ./tests/setup.ts" }
test_watch = { execute = "bun test --preload ./tests/setup.ts --watch" }
test_unit = { execute = "bun test --preload ./tests/setup.ts tests/unit/**/*.test.ts" }
test_integration = { execute = "NODE_ENV=test bun test --preload ./tests/setup.ts tests/integration/**/*.test.ts" }
test_e2e = { execute = "NODE_ENV=test E2E_TEST=true bun test --preload ./tests/setup.ts tests/e2e/**/*.test.ts" }
test_file = { execute = "bun test --preload ./tests/setup.ts" }
prepare = { execute = "husky install" }
example_ob3 = { execute = "bun run examples/run-ob3-example.js" }

# Type Safety Commands
type_check = { execute = "bun tsc --noEmit" }
find_any = { execute = "grep -r \"any\" src/ --include=\"*.ts\" --exclude-dir=\"node_modules\"" }
find_assertions = { execute = "grep -r \"as \\|<.*>\" src/ --include=\"*.ts\" --exclude-dir=\"node_modules\"" }

# Database Commands
db_check = { execute = "bun run src/db/scripts/check-schema.ts" }
db_validate = { execute = "bun run src/db/scripts/validate-schema.ts" }

# Documentation Commands
docs_api = { execute = "bun run scripts/generate-api-docs.ts" }
docs_schema = { execute = "bun run scripts/generate-schema-docs.ts" }
docs_validate = { execute = "bun run scripts/validate-docs.ts" }

# Security Commands
security_audit = { execute = "bun run scripts/security-audit.ts" }
key_rotate = { execute = "bun run scripts/rotate-keys.ts" }

# Quality Assurance
qa_full = { execute = "bun run scripts/qa-check.ts" }
coverage = { execute = "bun test --coverage" }
perf_test = { execute = "bun run scripts/performance-test.ts" }

# Image Processing
image_optimize = { execute = "bun run scripts/optimize-images.ts" }
image_validate = { execute = "bun run scripts/validate-images.ts" }

# Utility Commands
clean = { execute = "rm -rf dist coverage .nyc_output" }
reset = { execute = "bun run clean && rm -rf node_modules && bun install" }
update_deps = { execute = "bun run scripts/update-dependencies.ts" }

[testing]
framework = "bun:test"
require_tests = true
coverage_tool = "bun:coverage"
setup_file = "./tests/setup.ts"
unit_test_pattern = ["'src/__tests__/' 'tests/unit/' 'src/tests/' 'src/utils/**/__tests__/' 'src/services/__tests__/'"]
integration_test_pattern = ["tests/integration", "src/**/*.integration.test.ts", "src/services/__tests__/integration/", "src/routes/__tests__/integration/"]
exclude_pattern = ["src/**/*.integration.test.ts", "src/services/__tests__/integration/", "src/routes/__tests__/integration/"]
test_db_url = "postgres://postgres:postgres@localhost:5434/bun_badges_test"
test_docker_compose = "docker-compose.test.yml"

[documentation]
api_docs = true
readme_required = true
changelog_required = true
jsdoc_style = "minimal"

[ci]
required_checks = [
  "tsc",
  "lint",
  "test",
  "build"
]

[database]
migrations_required = true
schema_docs_required = true
type = "postgresql"

[api]
framework = "hono"
openapi_spec_required = true
versioning_required = true

[development]
node_version = ">=20.0.0"
bun_version = ">=1.0.0"
use_strict_mode = true
use_typescript = true 
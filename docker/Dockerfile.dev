FROM oven/bun:1 AS dev

# Ensure we're running as root for package installation
USER root

# Add backports for newer librsvg
RUN echo "deb http://deb.debian.org/debian bookworm-backports main" >> /etc/apt/sources.list

# Install build tools and libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    python3 \
    build-essential \
    pkg-config \
    libpixman-1-dev \
    libcairo2-dev \
    libpango1.0-dev \
    libjpeg-dev \
    libgif-dev \
    && apt-get install -y -t bookworm-backports librsvg2-dev \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g node-gyp \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy BitSet global preload script 
RUN echo 'import BitSet from "fast-bitset"; globalThis.BitSet = BitSet;' > /app/global-bitset.js

# Set environment variables
ENV PORT=3000 \
    HOST="0.0.0.0" \
    NODE_ENV=development

# Expose ports for development
EXPOSE ${PORT}

# We don't copy the code or install dependencies here
# Instead, we'll mount the code volume at runtime and install deps then
# This allows for live code changes without rebuilding the image

# Create a startup script for development
RUN echo '#!/bin/bash\n\
if [ ! -f "package.json" ]; then\n\
  echo "Error: package.json not found. Please make sure you mount your project to /app"\n\
  exit 1\n\
fi\n\
\n\
# Install dependencies if node_modules doesn't exist\n\
if [ ! -d "node_modules" ]; then\n\
  echo "Installing dependencies..."\n\
  bun install\n\
fi\n\
\n\
# Run the dev command\n\
exec bun --preload /app/global-bitset.js "$@"\n\
' > /app/start-dev.sh && chmod +x /app/start-dev.sh

# Set the entrypoint to the startup script
ENTRYPOINT ["/app/start-dev.sh"]

# Default command is to start the development server
CMD ["run", "dev"]
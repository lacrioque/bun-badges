name: CI Tests

on:
  push:
    branches: [ main, master, develop ]
  # Remove pull_request trigger to avoid duplicate runs

jobs:
  test:
    runs-on: ubuntu-latest

    # Set environment variables available to all steps
    env:
      CI: true
      NODE_ENV: test
      DATABASE_URL: postgres://postgres:${{ secrets.DB_PASSWORD || 'postgres' }}@localhost:5432/bun_badges_test
      PORT: 3001
      JWT_SECRET: ${{ secrets.TEST_JWT_SECRET || 'ci-test-jwt-secret-for-github-actions' }}
      SKIP_DOCKER: true
      LOG_LEVEL: info
      BUN_TEST_TIMEOUT: 60000
      # Share connection pool between tests to prevent "pool ended" issues
      DB_POOL_PER_FILE: false
      # Use our improved CI setup
      USE_CI_DATABASE_SETUP: true

    # Service containers to run alongside the job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16-alpine
        # Service container environment variables
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'postgres' }}
          POSTGRES_DB: bun_badges_test
          # Optimize PostgreSQL for testing
          POSTGRES_INITDB_ARGS: "--nosync"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Forward port 5432 on service container to port 5432 on host
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Setup database with transaction-based approach
        run: |
          echo "Setting up database with improved CI setup..."
          bun run src/utils/test/ci-database-setup.ts
          
          # Run evidence_url migration
          echo "Running evidence_url column migration..."
          bun run db:migrate:evidence-url

          # Display created tables for debugging
          echo "Tables created:"
          PGPASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }} psql -h localhost -U postgres -d bun_badges_test -c "\dt"
          
          # Show badge_assertions table schema to confirm evidence_url column
          echo "badge_assertions table schema:"
          PGPASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }} psql -h localhost -U postgres -d bun_badges_test -c "\d badge_assertions"

      - name: Run unit tests
        run: bun test tests/unit

      - name: Run integration tests (sequential)
        env:
          INTEGRATION_TEST: true
          # Important: use the same pool across all test files
          DB_POOL_PER_FILE: false
        run: |
          # Create an ordered list of test files
          find_test_files() {
            # First run schema/non-controller tests
            find tests/integration -name "*.service.integration.test.ts" -o -name "*.model.integration.test.ts" | sort
            # Then run controller tests
            find tests/integration -name "*.controller.integration.test.ts" | sort
            # Then run edge case tests
            find tests/integration -name "*.edge.integration.test.ts" | sort
            # Then run route tests
            find tests/integration -name "*.routes.integration.test.ts" -o -name "*.test.ts" | grep -v "service\|model\|controller\|edge" | sort
          }

          # Run the test files in sequence
          echo "Running integration tests in order..."
          for file in $(find_test_files); do
            echo "Running test file: $file"
            # Set a timeout for each test file to prevent hanging
            timeout 2m bun test $file || exit_code=$?
            if [ ! -z "$exit_code" ] && [ "$exit_code" -ne 0 ]; then
              echo "❌ Test file failed: $file (exit code: $exit_code)"
              # Don't exit immediately, continue with other tests
            fi
          done

          # Test was successful
          echo "✅ Integration tests completed"

      - name: Run E2E tests
        env:
          E2E_TEST: true
        run: bun test tests/e2e
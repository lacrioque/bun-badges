name: CI Tests

on:
  push:
    branches: [ main, master, develop ]
  # Remove pull_request trigger to avoid duplicate runs

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Set environment variables available to all steps
    env:
      CI: true
      NODE_ENV: test
      DATABASE_URL: postgres://postgres:${{ secrets.DB_PASSWORD || 'postgres' }}@localhost:5432/bun_badges_test
      PORT: 3001
      JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
      SKIP_DOCKER: true
      LOG_LEVEL: info
      BUN_TEST_TIMEOUT: 60000
      # Create a fresh pool for each test file
      DB_POOL_PER_FILE: true
    
    # Service containers to run alongside the job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16-alpine
        # Service container environment variables
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'postgres' }}
          POSTGRES_DB: bun_badges_test
          # Optimize PostgreSQL for testing
          POSTGRES_INITDB_ARGS: "--nosync"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Forward port 5432 on service container to port 5432 on host
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install

      - name: Setup database and run migrations with retry
        run: |
          echo "Running database migrations..."
          
          # Use the updated push command
          bun run db:push
          
          # Add retry logic for database setup
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Checking if tables exist (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
            TABLES=$(bun run src/db/list-tables.ts 2>&1 || echo "Failed")
            
            if [[ $TABLES == *"All required tables exist"* ]]; then
              echo "✅ Database migration successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "❌ Failed to create database tables after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "Waiting for migrations to complete (30s)..."
              sleep 30
              echo "Retrying migrations..."
              bun run db:push
            fi
          done
      
      - name: Run unit tests
        run: bun test tests/unit
      
      - name: Run integration tests (one by one)
        env:
          INTEGRATION_TEST: true
        run: |
          # Run each test file separately to avoid pool conflicts
          for file in $(find tests/integration -name "*.test.ts"); do
            echo "Running $file..."
            bun test $file || exit 1
          done
      
      - name: Run E2E tests
        env:
          E2E_TEST: true
        run: bun test tests/e2e 
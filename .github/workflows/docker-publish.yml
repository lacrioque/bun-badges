name: Docker Build and Publish

on:
  # Run after CI workflow completes on main branch
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed
  # For tag releases (which will run their own tests)
  push:
    tags: [ 'v*.*.*' ]
  # Manual trigger for debugging
  workflow_dispatch:

env:
  # Use GitHub Container Registry
  REGISTRY: ghcr.io
  # GitHub repository as image name
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # For tags, run full CI pipeline
  validate-tag:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'
          
      - name: Install dependencies
        run: bun install
        
      - name: Run linter
        run: bun run lint

      - name: Type check
        run: bun run tsc
      
      # Add PostgreSQL service
      - name: Set up PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: bun_badges_test
          port: 5432
        
      - name: Initialize test database
        env:
          CI: true
          NODE_ENV: test
          SKIP_DOCKER: true
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/bun_badges_test
          JWT_SECRET: ci-test-jwt-secret-for-github-actions
          LOG_LEVEL: info
        run: |
          # Setup database
          echo "Setting up database with CI database setup..."
          bun run src/utils/test/ci-database-setup.ts
          
          # Run migrations
          echo "Running database migrations..."
          bun run db:migrate
          bun run db:migrate:evidence-url
        
      - name: Run tests
        env:
          CI: true
          NODE_ENV: test
          SKIP_DOCKER: true
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/bun_badges_test
          JWT_SECRET: ci-test-jwt-secret-for-github-actions
          LOG_LEVEL: info
        run: |
          bun run test:unit
          bun run test:integration
          bun run test:e2e
      
      - name: Build
        run: bun run build
        
      - name: Verify build output
        run: |
          # Check if dist/index.js exists
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found. Build failed."
            exit 1
          fi
          echo "âœ… Build verification successful"

  # Docker build and push
  docker:
    runs-on: ubuntu-latest
    # Only need to specify needs for tag pushes
    needs: [validate-tag]
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || 
      github.event_name == 'workflow_dispatch' || 
      startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Vulnerability scan for filesystem
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload scan results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Setup for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Update deployment status
      - name: Update deployment status
        if: success()
        run: |
          echo "::notice::Docker image published successfully to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Latest tag: ${{ steps.meta.outputs.tags }}"
